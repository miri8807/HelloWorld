/*
// helloworld.cpp
#include <iostream>
 //iostream > 언리얼 표준 라이브러리 (기본 기능)
//이 라이브러리를 포함(가져온다)한다는 소리
//보통은 따옴표를 쓰는데 위와 같은 표준 라이브러리의 경우는 꺾쇠
//참고: # 다는건 규칙 (컴파일 단계에서 처리하는 것들은 보통 #을 붙인다고)


int main() {
	//코드의 시작점을 알림, main이 실행되면서 모든 코드가 시작
	//int가 코드에 오류가 없으면 true 오류가 있으면 false로 반환? 한다는듯
	//int main(int argc, char* argv[]) <argc는 개수, 0번은 프로그램ㅇ ㅣ름이라 argv에는 한 개가 더 추가된다?
	//시작 설정같은 느낌이라고 함. 값을 특별히 설정해야 할 때 괄호 안 int등등을 작성
	// ------[예문1. 51p]
	std::cout << "Hello, World!" << std::endl;
	//std: 표준 라이브러리, cout(씨아웃?????)은 변수를 출력시키는것
	//문장 끝나면 std endl로 끝내기?

	// ------[예문2. 55p]
	std::cout << "There are " << 219 << " ways I love you" << std::endl;
	//문자 사이 숫자 출력 시 위와 같이 작성
	//따옴표를 쓰면 219는 문자가 되고, 위와 같이 작성 시 숫자가 됨 (참고: 타입)
	//둘다 스트링형? 이라 위처럼 구분 안해도 문제는 없다는 듯?

	std::cout << "There are " << 219 << " ways" << "\n" << "I love you" << std::endl;
	std::cout << "There are " << 219 << " ways\n" << "I love you" << std::endl;
	//-- \n = 역슬러쉬+n임. 줄바꿈 시 사용하고 위와 같이 따옴표 사이 혹은 단어 바로 뒤에 작성

	// ------[연습예문]
	std::cout << "A\nBC\nDEF\nGH" << std::endl;

	// ------[예문 4. 55p]
	int value; //int로 value를 받으므로 숫자만 인식 가능
	//int는 실수(소수점 들어가는)는 불가능
	//정수(음수도 포함되는) 가능
	//음수 표기 불가능하게 하고싶을 시 unsigned int value
	//기본형이 signed?
	//이 value는 이름인가봄? 수정 안하는 경우 아래에도 같은 값이 출력되는듯

	float value2; //실수 입력 가능. 3.141592 등등

	char c1; //문자 하나. ABC를 입력해도 A만 저장.
	//char는 문자 하나만 들어갈 수 있기 때문에 작은따옴표 사용'' (큰따옴표는 여러 문자가 들어갈 때 사용)
	//- c1 = '\101'; 유니코드? 입력 방식
	//- c1 = '\x41'; 16진법 입력 방식

	std::cin >> value2;
	//위 문구를 입력하면 입력할 수 있는 창이 나옴, 입력하고 엔터치면 종료됨
	//= cin을 입력하면 동작이 멈춤(=대기) cin을 윗줄에 입력하면 바로 문구코드가 뜨는 게 아니라
	//대기 중 입력이 들어오면 다음 코드를 실행

	// ------[연습예문 2]
	std::cout << "There are " << value2 << " ways I love you" << std::endl;
	//위처럼 value 입력 시 내가 숫자를 입력할 때까지 대기
	//숫자 입력이 들어오면 위 문구에 입력한 숫자를 포함해서 출력
	//위에 value2 가 들어가 있으니까 변수 지정(int 또는 flaot 등등) 해준 뒤 cin>>value2 까지 해줘야 사전 설정이 완료
	//cin으로 입력 대기를 안 할거면 변수 지정하면서 값 입력이 필요하다는 얘기인 듯 = 아래 변수 초기화하는 법 참고


	//변수 초기화하는 법
	//int value, std::cin에 value 말고 다른 게 있어서 입력할 수 있는 방법이 없으면 오류가 남
	//- int value = 0; 으로 value값 지정해서 초기화할 수 있음
	//- int a1 (0);
	//- int a2 = { 0 };
	//- int a3{ 0 }; 이상도 변수를 0으로 지정하는 것 <주로 이거나 이 위 방법을 씀
	

	
	//value = 0b1001011; //2진법 표기법
	//		0b: 이진법으로 표기하겠다고 선언?
	//value = 0123; //8진법 표기법
	//value = 0x9f; //16진법 표기법 

	return 0;
}
*/




/*빌드 >
솔루션빌드 (f7 또는 컨+시+b)  : 솔루션 내 모든 소스?를 다 돌림, 리빌드는 다 지우고 다시 돌리기
헬로월드 빌드: 프로젝트(헬로월드 부분이 이름인듯)만 따로 빌드
로컬디버거: 시작프로젝트로 설정된(약간 볼드)것만 빌드

솔루션 구성>
디버그: 문제 확인
릴리즈: 배포 시 사용(로그 등 개발 시에 확인하는 것 제외하고 퍼포먼스 좋은 상태로 빌드)
그 옆에 x32~86은 빌드 환경

전처리, 컴파일, 링커?
로컬 윈도우즈 디버거는 위 단계가 통합된 상태라는 것? 비주얼스크립트가 통합개발환경이라?
*/




